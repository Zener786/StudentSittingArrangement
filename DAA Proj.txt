
package daa;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;





//This is the project for Seating arrangement using Graph--coloring method


class initializeSeats
{
  static String[][][] FinalSeat=new String[100][100][100];
  static String[][][] initialSeat = new String[100][100][100];
  static String[][][] initialsub = new String[100][100][100];
  static String[] subjectcode = { "11cs101", "11ee203", "11ec309" };
        

  
  static String[][] rollnosub = new String[][]{
                                       {"cs059","cs060","cs061","cs062","cs063","cs064","cs065","cs066","cs067","cs068"},
                                       {"ee059","ee060","ee061","ee062","ee063","ee064","ee065","ee066","ee067","ee068"},
                                       {"ec059","ec060","ec061","ec062","ec063","ec064","ec065","ec066","ec067","ec068"}};
  
//  static String[][]subject=new String[][]{
//      { "DSPD","DCFM","CAO","DM"},
//      { "DSPD","DCFM","SP","DBMS"},
//      { "DBMS","DAA","TOC","OS"},
//      { "SE","CN","DAA","OS"},
//      { "DSPD","DAA","TOC","OS"},
//      { "SE","CN","TOC","OS"},
//      { "DCFM","TOC","OS","DBMS"},
//      { "CN","CAO","SP","DM"},
//      { "SP","DM","CAO","SE"},
//      { "DM","TOC","DCFM","SE"}};
  
  // SE=0, dspd=1,dcfm=2,cao=3,dm=4,sp=5,dbms=6,daa=7,toc=8,os=9,cn=10

  static String[] hallname = { "a201", "a202", "a203" };
        static int[] Row = { 5, 5, 5 };
        static int[] Column = { 5, 5, 5};
        static int grouplimit = 3, cgrouplimit = 3, limit, n = 3;

        static int[] x = new int[100];
        static int[] roll = new int[100];
        
        
         static void initializeSeats()
        {
           try{
                  for (limit = 0; limit < grouplimit; limit++)
                {
                    x[limit] = limit;
                }
                for (limit = 0; limit < n; limit++)
                {
                    roll[limit] = 0;
                }
                limit = 0;
                for (int hall = 0; hall < hallname.length; hall++)
                {
                    for (int row = 0; row < Row[hall]; row++)
                    {
                        for (int col = 0; col < Column[hall]; )
                        {
                            
                            
                            initialSeat[hall][row][col] = rollnosub[x[limit]][roll[x[limit]]];
                            initialsub[hall][row][col] = subjectcode[x[limit]];
                            col++;
                            if (++roll[x[limit]] != 10)
                            {
                                limit++;
                            }
                           else
                            {
                                x[limit] = cgrouplimit++;
                                limit++;
                            }
                            if (limit == grouplimit)
                            {
                                limit = 0;
                            }
                        }
                    }
                }
        }
         catch(Exception e)
         {
         }        
        
}
         
         
            static Boolean isgraphcoloring(int hall)
        {
         try{
               for (int row = 0; row < Row[hall]; row++)
            {
                for (int col = 0; col < Column[hall]; col++)
                {
                    if ((row != 0) && (col != 0))
                    {
                        if (initialsub[hall][row][col] == initialsub[hall][row - 1][col] || initialsub[hall][row][col] == initialsub[hall][row][col - 1])
                        {
                            return false;
                        }
                    }
                    else if (row == 0 && col == 0)
                    {
                    }
                    else if (col == 0)
                    {
                        if (initialsub[hall][row][col] == initialsub[hall][row - 1][col])
                        {
                            return false;
                        }
                    }
                    else if (row == 0)
                    {
                        if (initialsub[hall][row][col] == initialsub[hall][ row][col - 1])
                        {

                            return false;
                        }
                    }

                    else
                    {
                    }

                }
            }
            
        }
           catch(Exception e1)
           {
              
           }     
      return true;
        }


            
          static void graphcolor()
        {
            try{
                cgrouplimit = grouplimit;
            
                for (limit = 0; limit < grouplimit; limit++)
                {
                    x[limit] = limit;
                }
                for (limit = 0; limit < n; limit++)
                {
                    roll[limit] = 0;
                }
                limit = 0;
                for (int hall = 0; hall < hallname.length; hall++)
                {
                    for (int row = 0; row < Row[hall]; row++)
                    {
                        for (int col = 0; col < Column[hall]; )
                        {

                            if (row == 0)
                            {
                                FinalSeat[hall][row][col] = rollnosub[x[limit]][roll[x[limit]]];
                                initialsub[hall][row][col] = subjectcode[x[limit]];
                            }
                            else
                            {
                                if (subjectcode[x[limit]] == initialsub[hall][row - 1][ col])
                                {
                                    limit++;
                                    if (limit == grouplimit)
                                    {
                                        limit = 0;
                                    }
                                    FinalSeat[hall][row][col] = rollnosub[x[limit]][roll[x[limit]]];
                                    initialsub[hall][ row ][col] = subjectcode[x[limit]];
                                }
                                else
                                {
                                    FinalSeat[hall][ row][ col] = rollnosub[x[limit]][roll[x[limit]]];
                                    initialsub[hall][row][col] = subjectcode[x[limit]];
                                }
                            }

                            ++col;

                            if (++(roll[x[limit]]) != 10)
                            {
                                limit++;
                            }
                            else
                            {
                                x[limit] = cgrouplimit++;
                                limit++;
                            }
                            if (limit == grouplimit)
                            {
                                limit = 0;
                            }

                        }

                    }
                }
       
        }
            catch(Exception e2)
            {
                
            }
        }
          
         void display()
         {
             initializeSeats();
             for (int hall = 0; hall < hallname.length; hall++)
                {
                    
                    if (isgraphcoloring(hall))
                    {
                     
                        for (int row = 0; row < Row[hall]; row++)
                        {
                            for (int col = 0; col < Column[hall]; col++)
                            {
                                FinalSeat[hall][row][col] = initialSeat[hall][row][col];
                            }
                        }
                    }
                    else
                    {
                        graphcolor();
                    }
                }
                        for (int hall = 0; hall < hallname.length; hall++)
                                 {

                    System.out.println("HALL NUMBER = "+hallname[hall]);
                    int FinalSeatno = 1;
                    for (int row = 0; row < Row[hall]; row++)
                    {
                        for (int FinalSeatnum = 0; FinalSeatnum < Column[hall]; FinalSeatnum++)
                        {
                            System.out.print("\t     "+ FinalSeatno++ +"    ");
                        }
                        System.out.println("");
                        
                        for (int col = 0; col < Column[hall]; col++)
                        {
                            System.out.print("\t"+FinalSeat[hall][row][col]+" ");
                        }
                        System.out.println("");
                        }
                    
                }
            
            }
}

class Graph
{
    private int V;   
    private LinkedList<Integer>adj[]; 

    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];
        for (int i=0; i<v; ++i)
            adj[i] = new LinkedList();
    }

    void addEdge(int v,int w)
    {
        adj[v].add(w);
        adj[w].add(v); 
    }
     void Coloring()
    {
       int result[] = new int[V];
       Arrays.fill(result, -1);
        result[0]  = 0;
        boolean available[] = new boolean[V];
         
        Arrays.fill(available, true);
 
        
        for (int u = 1; u < V; u++)
        {
            Iterator<Integer> it = adj[u].iterator() ;
            while (it.hasNext())
            {
                int i = it.next();
                if (result[i] != -1)
                    available[result[i]] = false;
            }
 
            int cr;
            for (cr = 0; cr < V; cr++){
                if (available[cr])
                    break;
            }
 
            result[u] = cr; 
 
           
            Arrays.fill(available, true);
        }
 
        
        for (int u = 0; u < V; u++)
            System.out.println("Vertex " + u + " --->  Color "
                                + result[u]);
    }
}

public class DAAProject {
    public static void main(String[] args) {
         initializeSeats i=new initializeSeats();
                i.display();
                Graph g1 = new Graph(11);
        g1.addEdge(0, 2);
        g1.addEdge(0, 3);
        g1.addEdge(0, 4);
        g1.addEdge(0, 5);
        g1.addEdge(0, 7);
        g1.addEdge(0, 8);
        g1.addEdge(0, 9);
        g1.addEdge(0, 10);
        
        
        g1.addEdge(1, 2);
        g1.addEdge(1, 3);
        g1.addEdge(1, 4);
        g1.addEdge(1, 5);
        g1.addEdge(1, 6);
        g1.addEdge(1, 7);
        g1.addEdge(1, 8);
        g1.addEdge(1, 9);
        
       
        g1.addEdge(2, 0);
        g1.addEdge(2, 3);
        g1.addEdge(2, 4);
        g1.addEdge(2, 5);
        g1.addEdge(2, 6);
        g1.addEdge(2, 8);
        g1.addEdge(2, 9);
        
        
       
        g1.addEdge(3, 4);
        g1.addEdge(3, 5);
        g1.addEdge(3, 10);
        
        
        g1.addEdge(4, 5);
        g1.addEdge(4, 8);
        g1.addEdge(4, 10);
        
        
        g1.addEdge(5, 6);
        g1.addEdge(5, 10);
        
        
        g1.addEdge(6, 7);
        g1.addEdge(6, 8);
        g1.addEdge(6, 9);
        
         g1.addEdge(7, 8);
         g1.addEdge(7, 9);
         g1.addEdge(7, 10);
         
         
         g1.addEdge(8, 9);
         g1.addEdge(8, 10);
         
         
         g1.addEdge(9, 10);
         
        
        
        
        
        
        System.out.println("Coloring of graph 1");
         g1.Coloring();
 
}
}
